name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =========================
  # Job 1: Run Tests
  # =========================
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linting
        run: |
          pip install flake8
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app --count --max-line-length=120 --statistics

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          FLASK_ENV: testing
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # =========================
  # Job 2: Build Docker Image
  # =========================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =========================
  # Job 3: Deploy to Render
  # =========================
  deploy-render:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Trigger Render Deployment
        run: |
          echo "üöÄ Triggering Render deployment..."
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}

      - name: Wait for Render to start
        run: sleep 90

      - name: Health check
        run: |
          echo "üîç Checking Render deployment health..."
          for i in {1..10}; do
            STATUS=$(curl -s -L -o /dev/null -w "%{http_code}" ${{ secrets.RENDER_APP_URL }}/api/health || true)
            if [ "$STATUS" = "200" ]; then
              echo "‚úÖ Render deployment healthy!"
              exit 0
            fi
            echo "Attempt $i failed (status: $STATUS), retrying in 10s..."
            sleep 10
          done
          echo "‚ùå Render deployment health check failed"
          exit 1

  # =========================
  # Job 4: Deploy to Railway
  # =========================
  deploy-railway:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Login to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: railway login --token $RAILWAY_TOKEN

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          echo "üîó Linking Railway project..."
          railway link --project ${{ secrets.RAILWAY_PROJECT_ID }} --environment production || echo "Already linked"

          echo "üöÄ Deploying to Railway..."
          if [ -n "${{ secrets.RAILWAY_SERVICE_NAME }}" ]; then
            railway up --service "${{ secrets.RAILWAY_SERVICE_NAME }}" --ci
          else
            railway up --ci
          fi

      - name: Wait for Railway to start
        run: sleep 90

      - name: Health check
        run: |
          echo "üîç Checking Railway deployment health..."
          APP_URL=${{ secrets.RAILWAY_APP_URL }}
          for i in {1..10}; do
            STATUS=$(curl -s -L -o /dev/null -w "%{http_code}" "$APP_URL/api/health" || true)
            if [ "$STATUS" = "200" ]; then
              echo "‚úÖ Railway deployment healthy!"
              exit 0
            fi
            echo "Attempt $i failed (status: $STATUS), retrying in 10s..."
            sleep 10
          done
          echo "‚ùå Railway deployment health check failed"
          exit 1
